{"version":3,"sources":["webpack:///./src/containers/VehicleDetail/VehicleDetail.js"],"names":[],"mappings":"8qBASA,gVAaM,0BACU,qEAEZ,OAID,SAJM,MACH,CACA,yBAAY,YAJhB,gDAQc,YACJ,EAAe,KAAK,MAE5B,iBACE,2BACE,MACA,OACA,iBAAU,kBACR,GAAK,SACH,YAAY,EAAE,OAAO,OAK9B,kDAEsB,cACS,KAAK,MAA3B,SAAM,kBACqB,KAAK,MAAhC,eAAY,IAEpB,iBAAO,GACL,yBACE,gCACE,SAAS,iBACK,MAAY,KAAK,iBAC3B,GAAK,SAAS,CAAc,eAD9B,EAFJ,GASA,oCAAQ,QAAS,iBAAM,GAAK,SAAS,CAAc,eAAnD,cAKF,yBACE,gCACE,SAAS,iBAAM,GAAK,SAAS,CAAc,cAAkB,cAD/D,GAOL,yCAEQ,OACsC,KAAK,MAA1C,kBAAwB,IAAT,MACvB,OAAM,EAAoB,EAAc,EAExC,OACG,IAGD,oBAFA,KAAkB,kBAEX,4BACR,cAAM,GACL,iBADS,KAAkB,kBACpB,4BACR,sCAE+B,KAAK,MAA7B,kBAAe,SACf,EAAe,KAAK,MAE5B,iBACE,wBAEG,UAAc,KACd,mBACD,mDAAiB,WAGtB,aAGH,iBAAM,EAAkC,kBACtC,eAAG,mBAAe,eAAwB,CAAE,gBAAe,OADrB,EAErC,WAAD,OACE,sBAAuB,WAAD,OAAgB,GAAS,OAAqB,QAD7C,EAM3B,gBAAe,kBAAQ,OAAI,UAAgC","file":"3.98e211f5.chunk.js","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport type { Connector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { hot } from 'react-hot-loader';\n\nimport { fetchVehicleIfNeeded } from '../../actions/vehicle';\nimport type {\n  Vehicle as VehicleType,\n  Dispatch,\n  ReduxState\n} from '../../types/index';\n\ntype Props = {\n  vehicle: VehicleType,\n  match: Object,\n  fetchVehicleIfNeeded: (id: string) => void\n};\n\nclass VehicleDetail extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      isEditable: false,\n      inputValue: ''\n    };\n  }\n\n  renderInput() {\n    const { inputValue } = this.state;\n\n    return (\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={e =>\n          this.setState({\n            inputValue: e.target.value\n          })\n        }\n      />\n    );\n  }\n\n  renderControlButtons() {\n    const { text, onSaveClick } = this.props;\n    const { isEditable, inputValue } = this.state;\n\n    return isEditable ? (\n      <span>\n        <button\n          onClick={() =>\n            onSaveClick(inputValue).then(() =>\n              this.setState({ isEditable: false })\n            )\n          }\n        >\n          Save\n        </button>\n        <button onClick={() => this.setState({ isEditable: false })}>\n          Cancel\n        </button>\n      </span>\n    ) : (\n      <span>\n        <button\n          onClick={() => this.setState({ isEditable: true, inputValue: text })}\n        >\n          Edit\n        </button>\n      </span>\n    );\n  }\n\n  render() {\n    const { vehicleDetail, match: { params } } = this.props;\n    const vehicleDetailById = vehicleDetail[params.id];\n\n    if (\n      !vehicleDetailById ||\n      vehicleDetailById.readyStatus === 'VEHICLE_REQUESTING'\n    ) {\n      return <p>Loading...</p>;\n    } else if (vehicleDetailById.readyStatus === 'VEHICLE_FAILURE') {\n      return <p>Oops, Failed to load detail!</p>;\n    }\n\n    const { onRemoveClick, text } = this.props;\n    const { isEditable } = this.state;\n\n    return (\n      <li>\n        {text}\n        {isEditable && this.renderInput()}\n        {this.renderControlButtons()}\n        <button onClick={onRemoveClick}>x</button>\n      </li>\n    );\n  }\n}\n\nconst connector: Connector<{}, Props> = connect(\n  ({ vehicleDetail, role }: ReduxState) => ({ vehicleDetail, role }),\n  (dispatch: Dispatch) => ({\n    fetchVehicleIfNeeded: (id: string) => dispatch(fetchVehicleIfNeeded(id))\n  })\n);\n\n// Enable hot reloading for async component\nexport default compose(hot(module), withRouter, connector)(VehicleDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/VehicleDetail/VehicleDetail.js"],"sourceRoot":""}